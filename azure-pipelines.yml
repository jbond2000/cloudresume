stages:
- stage: Plan
  displayName: "Terraform Plan"
  jobs:
  - job: terraformPlan
    displayName: 'Terraform Init and Plan'
    steps:
    - checkout: self

    - script: |
        # Clean up any previous Terraform initialization to avoid conflicts
        rm -rf .terraform
        rm -f terraform.tfstate
        rm -f terraform.tfstate.backup

        # Initialize Terraform with reconfiguration to ensure the backend is properly set up
        terraform init -reconfigure
      displayName: 'Terraform Init with Reconfigure'
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)

    - script: |
        # Generate and save the Terraform plan to a file
        terraform plan -out=tfplan
      displayName: 'Terraform Plan'
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)

    - script: |
        # Confirm the creation of the terraform.lock.hcl file
        if [ -f "terraform.lock.hcl" ]; then echo "terraform.lock.hcl exists."; else echo "terraform.lock.hcl does not exist."; fi
      displayName: 'Check if terraform.lock.hcl Exists'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'tfplan'
        artifactName: 'tfplan'
        publishLocation: 'pipeline'

    - task: PublishPipelineArtifact@1
      inputs:
        # Ensure the path points to the correct directory where terraform.lock.hcl is located
        targetPath: './terraform.lock.hcl' # Adjust path if necessary
        artifactName: 'terraform-lock'
        publishLocation: 'pipeline'

- stage: Apply
  displayName: "Terraform Apply"
  dependsOn: Plan
  condition: succeeded()
  jobs:
  - deployment: terraformApply
    environment: 'pre deployment'  # Use the environment name exactly as configured in Azure DevOps
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: 'tfplan'
              targetPath: './'

          - script: |
              # Reinitialize Terraform using the same lock file
              terraform init -reconfigure
              
              # Apply the previously generated Terraform plan
              terraform apply -auto-approve tfplan
            displayName: 'Terraform Apply'
            env:
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              ARM_TENANT_ID: $(ARM_TENANT_ID)
              ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
