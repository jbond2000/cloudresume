trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  ARM_CLIENT_ID: $(ARM_CLIENT_ID)
  ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
  ARM_TENANT_ID: $(ARM_TENANT_ID)
  ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)

jobs:
- job: terraform
  displayName: 'Terraform Dynamic Import, Plan, and Apply'
  steps:
  - checkout: self

  - script: |
      # Log in to Azure CLI
      az login --service-principal -u $(ARM_CLIENT_ID) -p $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
      az account set --subscription $(ARM_SUBSCRIPTION_ID)

      # Initialize Terraform
      terraform init

      # Define resource variables
      RESOURCE_GROUP_NAME="cloudresume"
      STORAGE_ACCOUNT_NAME="jbondcv"
      ACTION_GROUP_NAME="Application Insights Smart Detection"
      APP_SERVICE_PLAN_NAME="ASP-cloudresume-baaa"

      # Import the Resource Group if it exists in Azure but not in Terraform
      RG_ID=$(az group show --name "cloudresume" --query id -o tsv 2>/dev/null)
      if [ -n "$RG_ID" ] && ! terraform state show azurerm_resource_group.rg > /dev/null 2>&1; then
        echo "Importing existing Resource Group: cloudresume"
        terraform import azurerm_resource_group.rg "$RG_ID"
      else
        echo "Resource Group already managed by Terraform or does not exist in Azure."
      fi

      # Import Storage Account if it exists in Azure but not in Terraform
      STORAGE_ID=$(az storage account show --name $STORAGE_ACCOUNT_NAME --resource-group $RESOURCE_GROUP_NAME --query id -o tsv 2>/dev/null)
      if [ -n "$STORAGE_ID" ] && ! terraform state show azurerm_storage_account.storage_account > /dev/null 2>&1; then
        echo "Importing existing Storage Account: $STORAGE_ACCOUNT_NAME"
        terraform import azurerm_storage_account.storage_account "$STORAGE_ID"
      else
        echo "Storage Account already managed by Terraform or does not exist in Azure."
      fi

      # Import Action Group if it exists in Azure but not in Terraform
      ACTION_GROUP_ID=$(az monitor action-group show --name "$ACTION_GROUP_NAME" --resource-group $RESOURCE_GROUP_NAME --query id -o tsv 2>/dev/null)
      if [ -n "$ACTION_GROUP_ID" ] && ! terraform state show azurerm_monitor_action_group.action_group > /dev/null 2>&1; then
        echo "Importing existing Action Group: $ACTION_GROUP_NAME"
        terraform import azurerm_monitor_action_group.action_group "$ACTION_GROUP_ID"
      else
        echo "Action Group already managed by Terraform or does not exist in Azure."
      fi

      # Import App Service Plan if it exists in Azure but not in Terraform
      APP_SERVICE_PLAN_ID=$(az appservice plan show --name $APP_SERVICE_PLAN_NAME --resource-group $RESOURCE_GROUP_NAME --query id -o tsv 2>/dev/null)
      if [ -n "$APP_SERVICE_PLAN_ID" ] && ! terraform state show azurerm_app_service_plan.app_service_plan > /dev/null 2>&1; then
        echo "Importing existing App Service Plan: $APP_SERVICE_PLAN_NAME"
        terraform import azurerm_app_service_plan.app_service_plan "$APP_SERVICE_PLAN_ID"
      else
        echo "App Service Plan already managed by Terraform or does not exist in Azure."
      fi
    displayName: 'Terraform Import Resources Dynamically'

  
  - script: |
      # Import Resource Group if not already imported
      terraform import azurerm_resource_group.rg "/subscriptions/a67fa08c-8a71-4843-a6e9-1fbd1d8198b6/resourceGroups/cloudresume" || echo "Resource already imported or error during import"
    displayName: 'Import Resource Group into Terraform'

  - script: |
      # List the current state to confirm import
      terraform state list
    displayName: 'List Terraform State'

  - script: |
      terraform plan -out=tfplan
    displayName: 'Terraform Plan'

  - script: |
      terraform apply -auto-approve tfplan
    displayName: 'Terraform Apply'
